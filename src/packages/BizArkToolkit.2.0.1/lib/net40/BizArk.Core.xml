<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizArk.Core</name>
    </assembly>
    <members>
        <member name="T:BizArk.Core.StringExt.StringExt">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Wrap(System.String,System.Int32)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxLength">The maximum number of characters per line.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Wrap(System.String,System.Int32,System.String)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxLength">The maximum number of characters per line.</param>
            <param name="prefix">Adds this string to the beginning of each line.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Lines(System.String)">
            <summary>
            Splits the string into lines.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Words(System.String)">
            <summary>
            Splits the string into words (all white space is removed).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsEmpty(System.String)">
            <summary>
            Shortcut for ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.HasValue(System.String)">
            <summary>
            Shortcut for !ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Max(System.String,System.Int32)">
            <summary>
            Gets the string up to the maximum number of characters.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Split``1(System.String,System.Char[])">
            <summary>
            Returns an array split along the separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Max(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the string up to the maximum number of characters. If ellipses is true and the string is longer than the max, the last 3 chars will be ellipses.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <param name="ellipses"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsAscii(System.String)">
            <summary>
            Determines if a string consists of all valid ASCII values.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Right(System.String,System.Int32)">
            <summary>
            Gets the right side of the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Left(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.Format(System.String,System.Object[])">
            <summary>
            Shortcut for string.Format.
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IfEmpty(System.String,System.String)">
            <summary>
            If the string is empty, returns the default.
            </summary>
            <param name="str"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="F:BizArk.Core.StringExt.StringExt.Vowels">
            <summary>
            Vowels. Used for IsVowel.
            </summary>
        </member>
        <member name="M:BizArk.Core.StringExt.StringExt.IsVowel(System.Char)">
            <summary>
            Determines if the character is a vowel.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.FormatExt.FormatExt">
            <summary>
            Provides extension methods to format values.
            </summary>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.String,System.Object[])">
            <summary>
            Formats a string.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int16)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int16})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int32})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Int64)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Int64})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Decimal,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Single,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Single},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Double,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Fmt(System.Nullable{System.Double},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.FmtCurrency(System.Decimal,System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.FmtCurrency(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.FormatExt.FormatExt.Tmpl(System.String,System.Object)">
            <summary>
            Uses a StringTemplate to replace the values in the string.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.Bitmask">
            <summary>
            Represents a bitmask.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.#ctor(System.Int32)">
            <summary>
            Creates an instance of Bitmask.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.GetBit(System.Int32)">
            <summary>
            Returns the value of the specified bit in the bitmask.
            </summary>
            <param name="bitNum">A value between 1 and 32 that represents the position of the bit in the bitmask.</param>
            <returns>True if the bit is 1, false if the bit is 0.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.SetBit(System.Int32,System.Boolean)">
            <summary>
            Sets the specified bit in the bitmask.
            </summary>
            <param name="bitNum">A value between 1 and 32 that represents the position of the bit in the bitmask.</param>
            <param name="val">True to set the bit to 1, false to set the bit to 0.</param>
            <returns>The updated bitmask.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.ToString">
            <summary>
            Gets a string that represents the bitmask. Primary intended for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Util.Bitmask.Value">
            <summary>
            Gets the bitmask value.
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.#ctor">
            <summary>
            Creates an instance of Message.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.ShowMailClient">
            <summary>
            Displays the clients email client with this email using MAPISendMail.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.Send">
            <summary>
            Sends the email message using MAPISendMail.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.ShowMailClientAsync">
            <summary>
            Displays the clients email client with this email asynchrounously using MAPISendMail.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.SendAsync">
            <summary>
            Sends the email message asynchronously using MAPISendMail.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Message.OnSendAsyncCompleted(BizArk.Core.Email.SendAsyncCompletedEventArgs)">
            <summary>
            Raises the SendAsyncCompleted event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:BizArk.Core.Email.Message.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.CC">
            <summary>
            
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.BCC">
            <summary>
            
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.Attachments">
            <summary>
            Gets or sets attachments for the email.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.Subject">
            <summary>
            Gets or sets the subject of the email.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.Body">
            <summary>
            Gets or sets the body of the email.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.Message.IsSending">
            <summary>
            Gets a value that determines if the Send or ShowMailClient methods are currently running.
            </summary>
        </member>
        <member name="E:BizArk.Core.Email.Message.SendAsyncCompleted">
            <summary>
            Raised when the SendAsync or ShowMailClientAsync methods complete.
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.Message.SendAsyncCompletedDelegate">
            <summary>
            Delegate for SendAsyncCompleted event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BizArk.Core.Email.SendAsyncCompletedEventArgs">
            <summary>
            Event args for SendComplete event.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.SendAsyncCompletedEventArgs.#ctor(BizArk.Core.Email.SendStatus)">
            <summary>
            Creates an instance of SendAsyncCompletedEventArgs.
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:BizArk.Core.Email.SendAsyncCompletedEventArgs.#ctor(System.Exception)">
            <summary>
            Creates an instance of SendAsyncCompletedEventArgs.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:BizArk.Core.Email.SendAsyncCompletedEventArgs.Status">
            <summary>
            Gets the status from the send method. Check to make sure there wasn't an exception.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.SendAsyncCompletedEventArgs.Exception">
            <summary>
            Gets the exception associated with the send method (if it threw an exception).
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.AttachmentList">
            <summary>
            
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.EmailAddressList">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.EmailAddressList.#ctor(BizArk.Core.Email.EmailAddressType)">
            <summary>
            Creates an instance of EmailAddressList.
            </summary>
            <param name="addrType"></param>
        </member>
        <member name="M:BizArk.Core.Email.EmailAddressList.Add(System.String,System.String)">
            <summary>
            Adds a single email address.
            </summary>
            <param name="name"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Email.EmailAddressList.Add(System.String)">
            <summary>
            Add a single email address without a name.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Email.EmailAddressList.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of email addresses.
            </summary>
            <param name="addresses"></param>
        </member>
        <member name="P:BizArk.Core.Email.EmailAddressList.AddressType">
            <summary>
            Gets the type of address this is.
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.EmailAddress">
            <summary>
            Stores an email address.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.EmailAddress.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:BizArk.Core.Email.EmailAddress.Address">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.EmailAddressType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.EmailAddressType.Orig">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Email.EmailAddressType.To">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Email.EmailAddressType.CC">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Email.EmailAddressType.BCC">
            <summary></summary>
        </member>
        <member name="T:BizArk.Core.Util.WebUtil">
            <summary>
            Web related helper methods.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GetUrlEncodedData(System.Object)">
            <summary>
            Creates a query string.
            </summary>
            <param name="values">Encodes the properties of the class. If values is a NameValueCollection, the values of the collection will be encoded.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GenerateSlug(System.String,System.Int32)">
            <summary>
            Transforms a string into an identifier that can be used in a url.
            </summary>
            <param name="phrase"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GetContent(System.Net.HttpWebResponse)">
            <summary>
            Gets the contents of the response.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.MemSize">
            <summary>
            This class represents the size for memory on a computer.
            </summary>
            <remarks>
            <para>There are two standards for calculating size. One standard uses base 1024 and the other uses base 1000. </para>
            <para>The base 1024 standard is called IEC and is the basic one that most computer scientists understand and use.
            To convert you multiply the higher order number by 1024 to get the lower order number (eg, 1 KiB = 1024 bytes).
            Due to widespread confusion in the retail industry, this is no longer the standard for memory size and the prefixes
            associated with them are now changed to be KiB, MiB, GiB, and TiB.</para>
            <para>The base 1000 standard is called SI and is easier to understand by the consumer market. To convert you mutiply
            the higher order number by 1000 to get the lower order number (eg, 1 KB = 1000 bytes). The prefixes for these are
            KB, MB, GB, and TB.</para>
            <para>For more information on this, see http://en.wikipedia.org/wiki/Binary_prefix.</para>
            </remarks>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInKilobyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInMegabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInGigabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInTerabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInKibibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInMebibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInGibibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInTebibyte">
            <summary></summary>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.#ctor(System.Int64)">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.Zero">
            <summary>
            Represents a 0 byte memory size.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.GetString(System.Int64)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="totalBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.GetString(System.Int64,System.String)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="totalBytes"></param>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString(System.String)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.op_Implicit(BizArk.Core.Util.MemSize)~System.Int64">
            <summary>
            Converts a MemSize to a long by returning the total number of bytes.
            </summary>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.op_Implicit(System.Int64)~BizArk.Core.Util.MemSize">
            <summary>
            Converts a long that represents a number of bytes to a MemSize.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalBytes">
            <summary>
            Gets the total number of bytes for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalKilobytes">
            <summary>
            Gets the total number of Kilobytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalMegabytes">
            <summary>
            Gets the total number of Megabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalGigabytes">
            <summary>
            Gets the total number of Gigabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalTerabytes">
            <summary>
            Gets the total number of Terabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalKibibytes">
            <summary>
            Gets the total number of Kibibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalMebibytes">
            <summary>
            Gets the total number of Mebibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalGibibytes">
            <summary>
            Gets the total number of Gibibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalTebibytes">
            <summary>
            Gets the total number of Tebibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="T:BizArk.Core.Data.IDbInfo">
            <summary>
            This interface is used to initialize a Database instance with a specific provider.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.IDbInfo.CreateConnection">
            <summary>
            Creates an instance of DbConnection. The connection is NOT opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.IDbInfo.CreateCommand(System.String,System.Object)">
            <summary>
            Creates an instance of a DbCommand. Populates the command if the parameters are supplied.
            </summary>
            <param name="commandText">The command text for the command.</param>
            <param name="parameters">An object that contains properties to use as parameters for the command. The property name must match a parameter in the sql or it will be ignored.</param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Data.SqlDbInfo">
            <summary>
            Provides methods for working with a Sql Server database.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.SqlDbInfo.#ctor(System.String)">
            <summary>
            Creates an instance of SqlDbInfo.
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:BizArk.Core.Data.SqlDbInfo.CreateConnection">
            <summary>
            Creates an instance of SqlConnection. The connection is NOT opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.SqlDbInfo.CreateCommand(System.String,System.Object)">
            <summary>
            Creates an instance of a SqlCommand. Populates the command if the parameters are supplied.
            </summary>
            <param name="sql">The T-SQL for the command.</param>
            <param name="parameters">An object that contains properties to use as parameters for the command. The property name must match a parameter in the sql or it will be ignored.</param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Data.SqlDbInfo.ConnStr">
            <summary>
            Gets the connection string to use for the database.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy">
            <summary>
            Converts a string to a byte[] (and vice-versa).
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.IConvertStrategy">
            <summary>
            Interface for defining conversion strategies. Used in ConvertEx. Each strategy object should be used to convert from exactly one type to another.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.IConvertStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.IConvertStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.Encoding">
            <summary>
            Gets the encoding to use for converting the value.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineProperty">
            <summary>
            Represents a property that can be set via the command-line.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.#ctor(BizArk.Core.CmdLine.CmdLineObject,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates an instance of a CmdLineProperty.
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.#ctor(BizArk.Core.CmdLine.CmdLineObject,System.ComponentModel.PropertyDescriptor,BizArk.Core.CmdLine.CmdLineArgAttribute)">
            <summary>
            Creates an instance of a CmdLineProperty.
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <param name="claAtt"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineProperty.ToString">
            <summary>
            Gets the textual representation of this command-line object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Object">
            <summary>
            Gets the command-line object associated with this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Name">
            <summary>
            The name of the command-line property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Description">
            <summary>
            Gets the description associated with the property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Aliases">
            <summary>
            Gets the aliases associated with this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Required">
            <summary>
            Gets or sets a value that determines if this command-line argument is required.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Usage">
            <summary>
            Gets or sets the short description that should be used in the usage description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.ShowInUsage">
            <summary>
            Gets or sets a value that determines if the argument should be displayed in the usage. By default, only required arguments and help are displayed in the usage in order to save space when printing the usage.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.PropertySet">
            <summary>
            Gets a value that determines if this property was set through the command-line or not.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.DefaultValue">
            <summary>
            Gets the default value for this property. Used in the command-line help description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Value">
            <summary>
            Gets or sets the current value for this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.ShowDefaultValue">
            <summary>
            Gets or sets a value that determines if the default value should be displayed to the user in the usage.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.AllowSave">
            <summary>
            Gets or sets a value that determines if the property should be saved.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineProperty.Error">
            <summary>
            Gets any errors associated with this property.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLinePropertyList">
            <summary>
            A list of CmdLineProperty objects.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.#ctor(BizArk.Core.CmdLine.CmdLineObject)">
            <summary>
            Creates an instance of CmdLinePropertyList.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.Add(System.String,BizArk.Core.CmdLine.CmdLineProperty)">
            <summary>
            Adds a command-line property to the list keyed to the given name.
            </summary>
            <param name="name"></param>
            <param name="prop"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLinePropertyList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Item(System.String)">
            <summary>
            Gets the command-line property associated with this argument.
            </summary>
            <param name="argName">This can be the shortcut, full property name, or a partial property name that is unique.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown when the command-line property cannot be found.</exception>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Count">
            <summary>
            Gets the number of properties in the list.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLinePropertyList.Object">
            <summary>
            Gets the command-line object for this list.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperResponse">
            <summary>
            Contains the response from the request.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.#ctor(System.Object,System.String,System.Net.HttpStatusCode,System.String,System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Creates an instance of WebHelperResponse.
            </summary>
            <param name="result"></param>
            <param name="contentType"></param>
            <param name="statusCode"></param>
            <param name="contentEncoding"></param>
            <param name="charSet"></param>
            <param name="options"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.ResultToImage">
            <summary>
            Converts the result to an image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.ResultToXml">
            <summary>
            Converts the result to an xml document (the actual result should be an xml string).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.ResultToXDoc">
            <summary>
            Converts the result to an xml document (the actual result should be an xml string).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.ResultToString">
            <summary>
            Converts the result to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.ConvertResult``1">
            <summary>
            Converts the result to any type of object you specify (assuming it can be converted by ConvertEx.ChangeType[T]).
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.SaveFile(System.String,System.IO.FileMode)">
            <summary>
            Saves the result to a file.
            </summary>
            <param name="fileName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperResponse.GetEncoding">
            <summary>
            Gets the character encoding for the response. This will look at the content of the response if it is not set in the http headers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.Result">
            <summary>
            Gets the result. This will be a byte[] unless set to something else by the ProcessResponseStream event.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.ContentType">
            <summary>
            Gets the content type that describes the response.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.StatusCode">
            <summary>
            Gets the status code for the response.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.ContentEncoding">
            <summary>
            Gets the encoding for the response from the content-encoding http header.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.CharacterSet">
            <summary>
            Gets the character set for the response from the content-type http header if it contains a charset=[value].
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperResponse.Options">
            <summary>
            Gets the options for the request.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.PropertyUtil">
            <summary>
            Provides methods that are useful when working with properties.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.PropertyUtil.GetName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property based on a Linq expression.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.PropertyUtil.GetNameCore(System.Linq.Expressions.Expression)">
            <summary>
            Gets the name of the property in the expression.
            </summary>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.MathExt.MathExt">
            <summary>
            Extension methods for numeric values.
            </summary>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Makes sure the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes sure the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Makes sure the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.IsBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Determines if the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.MathExt.MathExt.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines if the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy">
            <summary>
            Uses a TypeConverter to perform a conversion.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy">
            <summary>
            Converts a .Net type to a SqlDBType.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.SqlDBTypeConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DbTypeMap">
            <summary>
            Map between different datatypes.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToNetType(System.Data.SqlDbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToNetType(System.Data.DbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToDbType(System.Type)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.ToSqlDbType(System.Type)">
            <summary>
            Converts the value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.CanConvertType(System.Type)">
            <summary>
            Determines if the .Net type can be converted to a SqlDbType/DbType or not.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry">
            <summary>
            Represents a map entry for conversion.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.#ctor(System.Type,System.Data.DbType,System.Data.SqlDbType)">
            <summary>
            Creates an instance of DbTypeMapEntry.
            </summary>
            <param name="type"></param>
            <param name="dbType"></param>
            <param name="sqlDbType"></param>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.Type">
            <summary>
            Gets the .Net type.
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.DbType">
            <summary>
            Gets the DbType.
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.DbTypeMap.DbTypeMapEntry.SqlDbType">
            <summary>
            Gets the SqlDbType.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelper">
            <summary>
            This is a helper class to easily make web requests. 
            It is intended as a replacement for WebClient. It 
            includes the ability to upload multiple files, post 
            form values, set a timeout, run asynchrounously, 
            and reports progress.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.#ctor(System.String)">
            <summary>
            Creates an instance of WebHelper.
            </summary>
            <param name="url">The URL must be a valid http url.</param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.#ctor(System.Uri)">
            <summary>
            Creates an instance of WebHelper.
            </summary>
            <param name="url">The URL must be a valid http url.</param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequest">
            <summary>
            Makes a request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequestAsync">
            <summary>
            Makes the web request asynchronously.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.CancelRequestAsync">
            <summary>
            Cancels the request in progress.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.Wait(System.Nullable{System.Int32})">
            <summary>
            Waits for the request to complete or until the timeout, whichever comes first.
            </summary>
            <param name="timeout">Number of milliseconds to wait for the request to complete. Set to null to wait indefinitely.</param>
            <returns>True if the request has completed, false if the timeout was reached.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.Wait(System.TimeSpan)">
            <summary>
            Waits for the request to complete or until the timeout, whichever comes first.
            </summary>
            <param name="timeout">How long to wait for the request to complete.</param>
            <returns>True if the request has completed, false if the timeout was reached.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.ProcessResponse(System.Net.HttpWebResponse)">
            <summary>
            Processes the response from the server.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.CreateRequest(BizArk.Core.Web.ContentType)">
            <summary>
            Creates the request that will be used to contact the server.
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Ensures that certain methods or events are called on the primary thread when running asynchronously.
            </summary>
            <param name="call"></param>
            <param name="arg"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.ReportRequestProgress(System.Int64)">
            <summary>
            Used by ContentType object to report progress during send.
            </summary>
            <param name="bytesSent"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.ReportResponseProgress(System.Int64)">
            <summary>
            Used by ContentType object to report progress during send.
            </summary>
            <param name="bytesRead"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequest(System.String,System.Object)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequestAsync(System.String,System.Object)">
            <summary>
            Simple method for making an asynchronous request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="values"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequest(System.Uri,System.Object)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequestAsync(System.Uri,System.Object)">
            <summary>
            Simple method for making an asynchronous request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="values"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequest(System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequestAsync(System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="options"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequest(System.Uri,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.MakeRequestAsync(System.Uri,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="options"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.DownloadFile(System.String,System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.DownloadFileAsync(System.String,System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple method for making a request using WebHelper.
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.DownloadFile(System.Uri,System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple and performant method to download files or any large amount of content.
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns>The WebHelperResponse.Result contains a FileInfo object.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.DownloadFileAsync(System.Uri,System.String,BizArk.Core.Web.WebHelperOptions)">
            <summary>
            Simple and performant method to download files or any large amount of content.
            </summary>
            <param name="url"></param>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns>The WaitHandle that can be used to determine when the request is complete.</returns>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.OnPrepareRequest(BizArk.Core.Web.PrepareRequestEventArgs)">
            <summary>
            Raises the PrepareRequest event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.OnProgressChanged(BizArk.Core.Web.WebHelperProgressChangedEventArgs)">
            <summary>
            Raises the ProgressChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.OnProcessResponseStream(BizArk.Core.Web.ProcessResponseStreamEventArgs)">
            <summary>
            Raises the ProcessResponseStream event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebHelper.OnRequestCompleted(BizArk.Core.Web.RequestCompletedEventArgs)">
            <summary>
            Raises the RequestCompleted event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:BizArk.Core.Web.WebHelper.Url">
            <summary>
            Gets the url for the web request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelper.ContentType">
            <summary>
            Gets or sets the content type for the request. If null, will determine the content type based on what needs to be sent. ContentTypes are a one-use thing. If set, it will need to be set for each call.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelper.IsBusy">
            <summary>
            Gets a value that determines if an asynchronous request is already in progress.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelper.CancellationPending">
            <summary>
            Gets a value that determines if the current asynchronous request has been cancelled.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelper.Options">
            <summary>
            Gets or sets the options to use for the request.
            </summary>
        </member>
        <member name="E:BizArk.Core.Web.WebHelper.PrepareRequest">
            <summary>
            Event raised before the request is made. Allows for customization of the request object before the request is sent. This event is raised on the calling thread. It is recommended that you do not update the UI in this event handler.
            </summary>
        </member>
        <member name="E:BizArk.Core.Web.WebHelper.ProgressChanged">
            <summary>
            Event raised when the progress changes. This event is raised on the thread that made the request.
            </summary>
        </member>
        <member name="E:BizArk.Core.Web.WebHelper.ProcessResponseStream">
            <summary>
            Event raised to allow you to process the response. Allows custom handling of the response. This event is raised on the calling thread. It is recommended that you do not update the UI in this event handler.
            </summary>
        </member>
        <member name="E:BizArk.Core.Web.WebHelper.RequestCompleted">
            <summary>
            Event raised when the request has been completed. This event is raised on the thread that made the request.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelper.PrepareRequestHandler">
            <summary>
            Delegate for PrepareRequest event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BizArk.Core.Web.WebHelper.ProgressChangedHandler">
            <summary>
            Delegate for ProgressChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BizArk.Core.Web.WebHelper.ProcessResponseStreamHandler">
            <summary>
            Delegate for ProcessResponseStream event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BizArk.Core.Web.WebHelper.RequestCompletedHandler">
            <summary>
            Delegate for the RequestCompleted event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:BizArk.Core.DataExt.DataExt">
            <summary>
            Provides extension methods for string arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.DataRow,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.DataRow,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.DataRow,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.DataRowView,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.DataRowView,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.DataRowView,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.DataRowView,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.DataRowView,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.DataRowView,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.IsNull(System.Data.DataRowView,System.String)">
            <summary>
            Determines if the field is null.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.AddWithValue(System.Data.SqlClient.SqlParameterCollection,System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to the end of the parameter collection.
            </summary>
            <param name="parameters"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="setNull">If true, sets the value to DBNull if it ConvertEx.IsEmpty is true.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetInt(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetBool(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value to a double.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value to a double.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a decimal. Uses ConvertEx to convert the value to a decimal.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            Returns the field value as a decimal. Uses ConvertEx to convert the value to a decimal.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetGuid(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.GetValue(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.IsNull(System.Data.IDataReader,System.String)">
            <summary>
            Determines if the field is null.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataExt.DataExt.ContainsField(System.Data.IDataReader,System.String)">
            <summary>
            Determines if the IDataReader contains the specified field.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy">
            <summary>
            Converts from a string to a bool.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.TrueValues">
            <summary>
            Gets the list of values that will equate to True. Everything else is false.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ConvertEx">
            <summary>
            This class provides the ability to convert types 
            beyond what is provided by the System.Convert
            class.
            </summary>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToBoolean(System.Object)">
            <summary>
            Converts the value to a Boolean. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToChar(System.Object)">
            <summary>
            Converts the value to a Char. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSByte(System.Object)">
            <summary>
            Converts the value to a SByte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToByte(System.Object)">
            <summary>
            Converts the value to a Byte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt16(System.Object)">
            <summary>
            Converts the value to a Int16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToShort(System.Object)">
            <summary>
            Converts the value to a Int16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt16(System.Object)">
            <summary>
            Converts the value to a UInt16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt32(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInteger(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt32(System.Object)">
            <summary>
            Converts the value to a UInt32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt64(System.Object)">
            <summary>
            Converts the value to a Int64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToLong(System.Object)">
            <summary>
            Converts the value to a Int64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt64(System.Object)">
            <summary>
            Converts the value to a UInt64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSingle(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToFloat(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDouble(System.Object)">
            <summary>
            Converts the value to a Double. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDecimal(System.Object)">
            <summary>
            Converts the value to a Decimal. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDateTime(System.Object)">
            <summary>
            Converts the value to a DateTime. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToString(System.Object)">
            <summary>
            Converts the value to a String. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.To``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. This is an alias 
            to ChangeType.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert from.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ChangeType``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert from.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
            <param name="to">The type to convert to.</param>
            <param name="provider">The IFormatProvider to use for the conversion.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.IsEmpty(System.Object)">
            <summary>
            Checks to see if the value is empty. The value is empty if it is null, DBNull, or matches the MinValue, MaxValue, or Empty fields of the values type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.RegisterEmptyValue(System.Type,System.Object)">
            <summary>
            Register a value that will be interpreted as an empty value for IsEmpty.
            </summary>
            <param name="type"></param>
            <param name="emptyValue"></param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.RegisterDefaultEmptyValues(System.Type)">
            <summary>
            Registers the default empty values for this type for use in IsEmpty.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue``1">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue(System.Type)">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ResetEmptyValues">
            <summary>
            Removes all the custom default empty values.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.MimePart">
            <summary>
            Represents a part of an Http request.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.MimePart.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of MimePart.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:BizArk.Core.Web.MimePart.Dispose">
            <summary>
            Disposes the MimePart.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.MimePart.Dispose(System.Boolean)">
            <summary>
            Disposes the MimePart. Part of the Disposable pattern (http://msdn.microsoft.com/en-us/library/b1yfkh5e%28VS.80%29.aspx).
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:BizArk.Core.Web.MimePart.Prepare(System.String)">
            <summary>
            Prepares the part for the request. Sets the Header and ContentLength properties.
            </summary>
            <param name="boundary"></param>
        </member>
        <member name="P:BizArk.Core.Web.MimePart.Headers">
            <summary>
            Gets the headers associated with this part.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MimePart.Header">
            <summary>
            Gets the headers converted to a byte array. Must call Prepare to use this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MimePart.ContentLength">
            <summary>
            Gets the total number of bytes for this part. Must call Prepare to use this property.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MimePart.Data">
            <summary>
            Gets the stream that contains the data for this part.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MimePart.Disposed">
            <summary>
            Determines if the part has been disposed. If true, the data stream is no longer valid.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.MimeMap">
            <summary>
            Provides a lookup service to get the MimeType based on a file extension. The default data comes from the Mime.Types file that is embedded in this project and the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.InitializeFromRegistry">
            <summary>
            Initializes the mime map from the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.Initialize(System.String)">
            <summary>
            Initializes the mime map from the string.
            </summary>
            <param name="mimeTypes">List of mime types. Uses the format in Apache Mime.Types format. View at http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup.</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.RegisterMimeType(System.String,System.String[])">
            <summary>
            Register a mime type.
            </summary>
            <param name="mimeType">The mime type. Ex: text/plain.</param>
            <param name="extensions">List of extensions for this mime type</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type based on the extension.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineException">
            <summary>
            Base class for exceptions used for command-line parsing.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of CmdLineException.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineArgumentException">
            <summary>
            Exception thrown if there is a problem with a command line arugment definition.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineArgumentException.#ctor(System.String)">
            <summary>
            Creates an instance of CmdLineArgumentException.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.AmbiguousCmdLineNameException">
            <summary>
            Exception thrown when multiple command-line properties match a given argument name.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.#ctor(System.String,BizArk.Core.CmdLine.CmdLineProperty[])">
            <summary>
            Creates an instance of AmbiguousCmdLineNameException.
            </summary>
            <param name="argName"></param>
            <param name="props"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.ArgName">
            <summary>
            Gets the name of the invalid argument.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.AmbiguousCmdLineNameException.AmbiguousProperties">
            <summary>
            Gets the conflicting properties.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebParameters">
            <summary>
            Dynamic class that stores parameters to be sent with the web request.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebParameters.#ctor">
            <summary>
            Creates an instance of WebParameters.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebParameters.#ctor(System.Object)">
            <summary>
            Creates an instance of WebParamters.
            </summary>
            <param name="values">The properties of this object will be converted to web parameters.</param>
        </member>
        <member name="M:BizArk.Core.Web.WebParameters.Add(System.Object)">
            <summary>
            Adds the properties of the object to the parameters.
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:BizArk.Core.Web.WebParameters.Values">
            <summary>
            Gets the parameters to upload.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebParameters.Binary">
            <summary>
            Gets the list of binary values to upload.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebParameters.Files">
            <summary>
            Get the list of files to upload.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebParameters.Count">
            <summary>
            Gets the total number of parameters.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebParameter">
            <summary>
            Base class for web parameters.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebParameter.#ctor(System.String,System.Object)">
            <summary>
            Creates an instance of WebParameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Web.WebParameter.CreateParameter(System.String,System.Object)">
            <summary>
            Factory method to create the parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.WebParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebParameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebFileParameter">
            <summary>
            Web parameter for files.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebFileParameter.ToString">
            <summary>
            Displays the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.WebFileParameter.File">
            <summary>
            Gets the file.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebBinaryParameter">
            <summary>
            Web parameter for byte arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebBinaryParameter.ToString">
            <summary>
            Displays the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.WebBinaryParameter.Data">
            <summary>
            Gets the byte array.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebTextParameter">
            <summary>
            Web parameter for text.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebTextParameter.ToString">
            <summary>
            Displays the parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.WebTextParameter.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.UrlParam">
            <summary>
            Represents a parameter in a URL.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlParam.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of UrlParam.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Web.UrlParam.ToString">
            <summary>
            Returns the URL encoded key=value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.UrlParam.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlParam.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlParam.EncodedValue">
            <summary>
            Gets the properly encoded value of the parameter.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.UrlParamList">
            <summary>
            Contains a list of UrlParam objects. 
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.#ctor">
            <summary>
            Creates an instance of UrlParamList.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.#ctor(System.String)">
            <summary>
            Creates an instance of UrlParamList based on a query string.
            </summary>
            <param name="queryStr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.AddRange(System.String)">
            <summary>
            Adds a range of parameters based on a query string.
            </summary>
            <param name="queryStr"></param>
            <returns>The list of new UrlParam objects.</returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.AddRange(System.Object)">
            <summary>
            Adds the properties of the object as parameters to the list.
            </summary>
            <param name="values"></param>
            <returns>The list of new UrlParam objects.</returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.Add(System.String,System.String)">
            <summary>
            Adds a UrlParam to the list.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.Add(System.String,System.Int64)">
            <summary>
            Adds a UrlParam to the list.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.Add(System.String,System.UInt64)">
            <summary>
            Adds a UrlParam to the list.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.Add(System.String,System.Guid)">
            <summary>
            Adds a UrlParam to the list.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.Remove(System.String)">
            <summary>
            Removes a parameter from the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.GetString(System.String,System.String)">
            <summary>
            Returns the value of the given parameter.
            </summary>
            <param name="name"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.GetInt(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the value of the given parameter.
            </summary>
            <param name="name"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.GetLong(System.String,System.Nullable{System.Int64})">
            <summary>
            Returns the value of the given parameter.
            </summary>
            <param name="name"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.GetGuid(System.String,System.Nullable{System.Guid})">
            <summary>
            Returns the value of the given parameter.
            </summary>
            <param name="name"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlParamList.ToString">
            <summary>
            Returns the encoded query string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.UrlParamList.Item(System.String)">
            <summary>
            Gets a url parameter based on it's name. 
            </summary>
            <param name="name"></param>
            <returns>Null if not found.</returns>
        </member>
        <member name="T:BizArk.Core.Web.UrlSegmentList">
            <summary>
            Holds parts of a url that will be combined to create the path.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlSegmentList.AddRange(System.String[])">
            <summary>
            Adds a set of segments to the url.
            </summary>
            <param name="segments"></param>
        </member>
        <member name="T:BizArk.Core.Web.HttpMethod">
            <summary>
            The different HTTP methods supported by the UrlBuilder submit method.
            </summary>
        </member>
        <member name="F:BizArk.Core.Web.HttpMethod.Get">
            <summary>Get methods</summary>
        </member>
        <member name="F:BizArk.Core.Web.HttpMethod.Post">
            <summary>Post methods</summary>
        </member>
        <member name="F:BizArk.Core.Web.HttpMethod.Put">
            <summary>Put methods</summary>
        </member>
        <member name="F:BizArk.Core.Web.HttpMethod.Delete">
            <summary>Delete methods</summary>
        </member>
        <member name="T:BizArk.Core.WebExt.WebExt">
            <summary>
            Extension methods that are useful when working with web objects.
            </summary>
        </member>
        <member name="M:BizArk.Core.WebExt.WebExt.GetContentString(System.Net.WebResponse)">
            <summary>
            Gets the content from a response.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.WebExt.WebExt.HtmlEncode(System.String)">
            <summary>
            Encodes a string for safe HTML.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.WebExt.WebExt.HtmlDecode(System.String)">
            <summary>
            Decodes an encoded string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.WebExt.WebExt.UrlEncode(System.String)">
            <summary>
            Can be used to encode a query string value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.WebExt.WebExt.UrlDecode(System.String)">
            <summary>
            Can be used to decode a url encoded value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.StringWriterEx">
            <summary>
            Implements a System.IO.TextWriter for writing information to a string. The 
            information is stored in an underlying System.Text.StringBuilder.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.StringWriterEx.#ctor(System.Text.Encoding)">
            <summary>
            Creates an instance of StringWriterEx.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:BizArk.Core.Util.StringWriterEx.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Creates an instance of StringWriterEx.
            </summary>
            <param name="sb"></param>
            <param name="encoding"></param>
        </member>
        <member name="P:BizArk.Core.Util.StringWriterEx.Encoding">
            <summary>
            Gets the System.Text.Encoding in which the output is written.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy">
            <summary>
            Uses a conversion method to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.XmlExt.XmlExt">
            <summary>
            Provides extension methods for processing Xml.
            </summary>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.GetString(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.GetString(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets a string from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="dfltVal"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.GetInt(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an integer from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.GetInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets an integer from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="dfltVal"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.SetAttributeValue(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets the value of the attribute to the given value. Creates the attribute if it doesn't exist. Uses ConvertEx to convert value to a string.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.XmlExt.XmlExt.SetElementValue(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets the value of the named element to the given value. Creates the element if it doesn't exist. Uses ConvertEx to convert value to a string.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:BizArk.Core.DateExt.DateExt">
            <summary>
            Provides extension methods for dates.
            </summary>
        </member>
        <member name="M:BizArk.Core.DateExt.DateExt.ToRelativeTimeString(System.DateTime)">
            <summary>
            Converts a Date to a string using relative time.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Template.StringTemplate">
            <summary>
            Provides a way to format a string using named parameters instead of positional parameters.
            </summary>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.#ctor(System.String)">
            <summary>
            Creates an instance of StringTemplate.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.ToString">
            <summary>
            Returns the formatted string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.ToString(System.Object)">
            <summary>
            Returns the formatted string based on the values in the object.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.Format(System.String,System.Object)">
            <summary>
            Format a string template with the given values.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Template.StringTemplate.CreateFormat">
            <summary>
            Called from Format property to parse the template and create a format string.
            </summary>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.Item(System.String)">
            <summary>
            Gets or sets the named argument. Ignores invalid arguments.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.Template">
            <summary>
            Gets the template string.
            </summary>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.ArgValues">
            <summary>
            Gets the values for the arguments.
            </summary>
        </member>
        <member name="P:BizArk.Core.Template.StringTemplate.ArgNames">
            <summary>
            Gets the names for the arguments.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.GetTrueType(System.Type)">
            <summary>
            Handles nullable types.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.CanConvertTo(System.Type)">
            <summary>
            Determines if IConvertible can convert to the given type.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.TempFile">
            <summary>
            Manages a temporary file. 
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor">
            <summary>
            Creates an instance of TempFile.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor(System.String)">
            <summary>
            Creates an instance of TempFile.
            </summary>
            <param name="ext">The extension for the file.</param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of TempFile.
            </summary>
            <param name="dir">The path to the directory.</param>
            <param name="template">The template for the file name. Place a {0} where the counter should go (ex, MyPicture{0}.jpg).</param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Dispose">
            <summary>
            Deletes the temp file if it exists.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Write(System.String)">
            <summary>
            Creates the temp file and writes the contents to it. 
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Append(System.String)">
            <summary>
            Appends the contents to the temp file. Creates the temp file if it doesn't already exist.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Write(System.Byte[])">
            <summary>
            Creates the temp file and writes the contents to it.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Delete">
            <summary>
            Deletes the temp file if it exists.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.TempFile.TempPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:BizArk.Core.DefaultBoolean">
            <summary>
            Provides a tri-state boolean to allow something else to determine the value.
            </summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.Default">
            <summary>Parent object determines value.</summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.True">
            <summary>True</summary>
        </member>
        <member name="F:BizArk.Core.DefaultBoolean.False">
            <summary>False</summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy">
            <summary>
            Strategy used to return the default value for a type;
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.DefaultValueConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.FontUtil">
            <summary>
            Provides helper methods for working with fonts.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.RegisterFont(System.Byte[])">
            <summary>
            Register a font from a byte array. Useful when embedding fonts.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.RegisterFont(System.String)">
            <summary>
            Register a font from a file.
            </summary>
            <param name="fontFilePath"></param>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.GetAllFamilies">
            <summary>
            Returns all of the installed and custom font families that are available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.GetFamily(System.String)">
            <summary>
            Gets the FontFamily based on the name.
            </summary>
            <param name="family"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.Create(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            Creates a font based (caller is responsible for disposing of the font). Will create any installed font or custom fonts that were registered with this class.
            </summary>
            <param name="family"></param>
            <param name="emSize"></param>
            <param name="style"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.EnumConversionStrategy">
            <summary>
            Converts to enumeration values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.EnumConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.EnumConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Collections.HashList`2">
            <summary>
            Represents a generic collection of key/value pairs. The enumerator returns the values in the order assigned.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Insert(System.Int32,`0,`1)">
            <summary>
            Adds the value to the list.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Add(`0,`1)">
            <summary>
            Adds the value to the list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Remove(`0)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Remove(`1)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the designated index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Clear">
            <summary>
            Removes all the items from the list.
            </summary>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetValue(`0)">
            <summary>
            Gets the value from the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetValue(`0,`1)">
            <summary>
            Gets the value from the list. If the key is not in the list, returns the default value.
            </summary>
            <param name="key"></param>
            <param name="dflt">Default value to return if the key does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value from the list. Returns true if the value exists, otherwise false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.SetValue(`0,`1)">
            <summary>
            Sets the value in the list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.ContainsKey(`0)">
            <summary>
            Determines if the key is in the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Contains(`1)">
            <summary>
            Determines if the item is in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.IndexOf(`1)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetKey(`1)">
            <summary>
            Gets the key based on the value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetKeyFromIndex(System.Int32)">
            <summary>
            Gets the key based on the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.ToArray">
            <summary>
            Gets an array of the values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.System#Collections#Generic#ICollection{TValue}#CopyTo(`1[],System.Int32)">
            <summary>
            Copies the values to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Item(`0)">
            <summary>
            Gets or sets the value for the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the designated index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.IsReadOnly">
            <summary>
            Gets a value that determines if the list if readonly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Keys">
            <summary>
            Returns the collection of keys.
            </summary>
        </member>
        <member name="T:BizArk.Core.DrawingExt.DrawingExt">
            <summary>
            Extensions for classes within the Drawing namespace.
            </summary>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeMin(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that it is no smaller than the min size.
            </summary>
            <param name="sz"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeMin(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that it is no smaller than the min size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeMax(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that it is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeMax(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that it is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeOverflow(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that at least one side is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ResizeOverflow(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that at least one side is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.Position(System.Drawing.Rectangle,System.Drawing.Rectangle,BizArk.Core.DrawingExt.PositionStyle)">
            <summary>
            Changes the coordinates for the rectangle.
            </summary>
            <param name="rect"></param>
            <param name="parent"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.Position(System.Drawing.Size,System.Drawing.Rectangle,BizArk.Core.DrawingExt.PositionStyle)">
            <summary>
            Gets the location to place an object of the given size within a parent area.
            </summary>
            <param name="sz"></param>
            <param name="parent"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.SetTop(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Top property.
            </summary>
            <param name="rect"></param>
            <param name="top"></param>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.SetLeft(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Left property.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.SetRight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Right property.
            </summary>
            <param name="rect"></param>
            <param name="right"></param>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.SetBottom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the bottom property.
            </summary>
            <param name="rect"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.ToMemSize(System.Int64)">
            <summary>
            Gets a string that represents the number of bytes.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DrawingExt.DrawingExt.SizeOf(System.Drawing.Image)">
            <summary>
            Gets the number of bytes for an image.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.DrawingExt.PositionStyle">
            <summary>
            Location of an element.
            </summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.TopLeft">
            <summary>Aligned to the top left</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.TopCenter">
            <summary>Aligned to the top center</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.TopRight">
            <summary>Aligned to the top right</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.MiddleLeft">
            <summary>Aligned to the middle left</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.MiddleCenter">
            <summary>Aligned to the middle center</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.MiddleRight">
            <summary>Aligned to the middle right</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.BottomLeft">
            <summary>Aligned to the bottom left</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.BottomCenter">
            <summary>Aligned to the bottom center</summary>
        </member>
        <member name="F:BizArk.Core.DrawingExt.PositionStyle.BottomRight">
            <summary>Aligned to the bottom right</summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy">
            <summary>
            Strategy used to do no conversion at all. Just returns the value that was sent in.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.NoConvertConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.CtorConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.CtorConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.CtorConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.ConvertStrategyMgr">
            <summary>
            Manages the strategies that can be used to convert values. Used by ConvertEx.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.ConvertStrategyMgr.GetStrategy(System.Type,System.Type)">
            <summary>
            Gets a conversion strategy based on the from and to types.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.ConvertStrategyMgr.RegisterStrategy(BizArk.Core.Convert.Strategies.IConvertStrategy)">
            <summary>
            Register a custom strategy. Custom strategies will be considered before built-in strategies.
            </summary>
            <param name="strategy"></param>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineOptionsAttribute">
            <summary>
            Apply this attribute to the command-line class in order to define options for 
            the command-line object.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineOptionsAttribute.CreateOptions">
            <summary>
            Creates the options object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Title">
            <summary>
            Gets or sets the title for the application. Shown at the top of the help text. Defaults to {AssemblyTitleAttribute} ver. {EntryAssembly.Version}
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.ApplicationName">
            <summary>
            Gets or sets the name of the application for use in the usage text. Defaults to the name of the exe that is running.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Usage">
            <summary>
            Gets or sets the text that shows how to use the command-line. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Description">
            <summary>
            Gets or sets the long description for the console application. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.DefaultArgName">
            <summary>
            Gets or sets the name/alias of the default property for the command-line. Setting this overwrites DefaultArgNames.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.DefaultArgNames">
            <summary>
            Gets or sets the names/aliases of the default properties for the command-line. Setting this overwrites DefaultArgName.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.ArgumentPrefix">
            <summary>
            Gets or sets the string used to identify argument names.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.WaitArgName">
            <summary>
            Gets or sets the boolean property used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram().
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Wait">
            <summary>
            Gets or sets a value used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram(). If WaitProperty is set, this value will be set during initialization.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptionsAttribute.Comparer">
            <summary>
            Gets or sets the rule for comparing the names/aliases. By default this is set to 
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute">
            <summary>
            Apply this attribute to the command-line class in order to define a default argument.
            This is the property that will be set if the first argument in the command-line 
            isn't an argument name. For example, if you want process a file name sent from
            Windows.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of CmdLineDefaultArgAttribute.
            </summary>
            <param name="DefaultArgName"></param>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineDefaultArgAttribute.DefaultArgName">
            <summary>
            The name of the property for the default argument.
            </summary>
        </member>
        <member name="T:BizArk.Core.ImageExt.ImageExt">
            <summary>
            Extension methods for images.
            </summary>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.Open(System.Drawing.Image)">
            <summary>
            Saves the image to the temp directory and opens it in the default application.
            </summary>
            <param name="img"></param>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.GetExtension(System.Drawing.Image)">
            <summary>
            Gets the default extension that can be used for the file name of the image.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes an image to fit within the given dimensions.
            </summary>
            <param name="img"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Int32,System.Int32,BizArk.Core.ImageExt.ResizeMethod)">
            <summary>
            Resizes an image.
            </summary>
            <param name="img"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Drawing.Size,BizArk.Core.ImageExt.ResizeMethod)">
            <summary>
            Resizes an image.
            </summary>
            <param name="img"></param>
            <param name="max"></param>
            <param name="method"></param>
            <returns>The resized image. If the image does not need to be resized, returns the original image.</returns>
        </member>
        <member name="M:BizArk.Core.ImageExt.ImageExt.IsImage(System.String)">
            <summary>
            Determines if the path is the path to an image file. Supports jpg, jpeg, gif, bmp, emf, exif, ico, png, tif, and wmf.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ImageExt.ResizeMethod">
            <summary>
            Methods of resizing.
            </summary>
        </member>
        <member name="F:BizArk.Core.ImageExt.ResizeMethod.Fit">
            <summary>Shrink to fit within the given dimensions. Might not fill the given dimensions. If smaller than the given dimensions, will not be resized.</summary>
        </member>
        <member name="F:BizArk.Core.ImageExt.ResizeMethod.FitStretch">
            <summary>Shrink or expand to fit within the given dimensions. Might not fill the given dimensions.</summary>
        </member>
        <member name="F:BizArk.Core.ImageExt.ResizeMethod.Fill">
            <summary>Shrink and crop to fit within the given dimensions. If smaller than the given dimensions, will not be resized.</summary>
        </member>
        <member name="F:BizArk.Core.ImageExt.ResizeMethod.FillStretch">
            <summary>Shrink or expand and crop to fit within the given dimensions.</summary>
        </member>
        <member name="F:BizArk.Core.ImageExt.ResizeMethod.Stretch">
            <summary>Shrink or expand to fill the given dimensions. Does not maintain original proportions.</summary>
        </member>
        <member name="T:BizArk.Core.ExceptionExt.ExceptionExt">
            <summary>
            Extensions for classes within the Drawing namespace.
            </summary>
        </member>
        <member name="M:BizArk.Core.ExceptionExt.ExceptionExt.GetDetails(System.Exception)">
            <summary>
            Gets the details of an exception suitable for display.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ClassFactory">
            <summary>
            The class factory for objects allows for objects to be changed at runtime.
            </summary>
        </member>
        <member name="M:BizArk.Core.ClassFactory.CreateObject``1(System.Object[])">
            <summary>
            Creates an object of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ClassFactory.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates an object of the specified type.
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ClassFactory.RegisterTypeReplacement(System.Type,System.Type)">
            <summary>
            Registers a replacement type. To clear a replacement, send in null.
            </summary>
            <param name="type"></param>
            <param name="replacementType"></param>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy.Convert(System.Type,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="value"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy.CanConvert(System.Type,System.Type)">
            <summary>
            Determines whether this converter can convert the value.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Web.UrlBuilder">
            <summary>
            The UrlBuilder allows you to easily create a properly formatted URL including encoding of parameter values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlBuilder.#ctor">
            <summary>
            Creates an instance of UrlBuilder.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UrlBuilder.ToUri">
            <summary>
            Gets the URI for this URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlBuilder.ToString">
            <summary>
            Returns the properly formatted URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlBuilder.ToUri(System.Boolean)">
            <summary>
            Gets the URI for this URL.
            </summary>
            <param name="includeParams">Used by WebClient to not include the parameters in the url.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UrlBuilder.ToString(System.Boolean)">
            <summary>
            Returns the properly formatted URL.
            </summary>
            <param name="includeParams">Used by WebClient to not include the parameters in the url.</param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Protocol">
            <summary>
            Gets or sets the protocol for the URL (e.g. http).
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Host">
            <summary>
            Gets or sets the domain name or IP for the server.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Port">
            <summary>
            Gets or sets the port number. Less than or equal to 0 prevents the port from appearing in the URL.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Authority">
            <summary>
            Gets or sets the host:port (e.g. www.redwerb.com:8080).
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Path">
            <summary>
            Gets the path for the URL. This is represented as a list of names. Index 0 will be displayed first (e.g. /Path0/Path1/.../PathN).
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Parameters">
            <summary>
            Gets the list of query string parameters.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UrlBuilder.Anchor">
            <summary>
            Gets or sets the anchor for the page.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.ContentType">
            <summary>
            Represents a particular content type for the request. Uses the strategy pattern for creating the request.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.#ctor(BizArk.Core.Web.WebParameters)">
            <summary>
            Creates an instance of ContentType.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.Dispose(System.Boolean)">
            <summary>
            Disposes the object. Part of the Disposable pattern (http://msdn.microsoft.com/en-us/library/b1yfkh5e%28VS.80%29.aspx).
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.CreateContentType(BizArk.Core.Web.HttpMethod,BizArk.Core.Web.WebParameters)">
            <summary>
            Creates a new instance of a ContentType based on the parameters sent in.
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.PrepareRequest(System.Net.HttpWebRequest,BizArk.Core.Web.WebHelper)">
            <summary>
            Creates an HttpWebRequest for the URL and prepares whatever it needs to.
            </summary>
            <param name="request"></param>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.SendRequest(BizArk.Core.Web.WebHelper,System.Net.HttpWebRequest)">
            <summary>
            Sends the request to the server. Does not get the response. Content types are only for sending, not receiving.
            </summary>
            <param name="helper"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.ContentType.GetUrl(BizArk.Core.Web.WebHelper)">
            <summary>
            Returns the url for the request. 
            </summary>
            <param name="webHelper"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.ContentType.Parameters">
            <summary>
            Gets the parameters to upload minus the files.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.ContentType.Disposed">
            <summary>
            Determines if the part has been disposed. If true, the data stream is no longer valid.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.NoContentType">
            <summary>
            Handles simple GET operations.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.NoContentType.#ctor(BizArk.Core.Web.WebParameters)">
            <summary>
            Creates an instance of NoContentType.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:BizArk.Core.Web.NoContentType.PrepareRequest(System.Net.HttpWebRequest,BizArk.Core.Web.WebHelper)">
            <summary>
            Creates an HttpWebRequest for the URL and prepares whatever it needs to.
            </summary>
            <param name="request"></param>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.NoContentType.GetUrl(BizArk.Core.Web.WebHelper)">
            <summary>
            Returns the url for the request. Will encode the form values into the url.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.NoContentType.SendRequest(BizArk.Core.Web.WebHelper,System.Net.HttpWebRequest)">
            <summary>
            Sends the request to the server. Does not get the response. Content types are only for sending, not receiving.
            </summary>
            <param name="helper"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Web.ApplicationUrlEncodedContentType">
            <summary>
            Handles application/x-www-form-urlencoded content types. Used for uploading form values. Will not upload files.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.ApplicationUrlEncodedContentType.#ctor(BizArk.Core.Web.WebParameters)">
            <summary>
            Creates an instance of ApplicationUrlEncodedContentType.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:BizArk.Core.Web.ApplicationUrlEncodedContentType.PrepareRequest(System.Net.HttpWebRequest,BizArk.Core.Web.WebHelper)">
            <summary>
            Creates an HttpWebRequest for the URL and prepares whatever it needs to.
            </summary>
            <param name="request"></param>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.ApplicationUrlEncodedContentType.SendRequest(BizArk.Core.Web.WebHelper,System.Net.HttpWebRequest)">
            <summary>
            Sends the request to the server. Does not get the response. Content types are only for sending, not receiving.
            </summary>
            <param name="helper"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.ApplicationUrlEncodedContentType.Data">
            <summary>
            Gets the url encoded string of form values.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.MultipartFormDataContentType">
            <summary>
            Handles multipart/form-data content types. Used for uploading files.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.MultipartFormDataContentType.#ctor(BizArk.Core.Web.WebParameters)">
            <summary>
            Creates an instance of MultipartFormDataContentType.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.MultipartFormDataContentType.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:BizArk.Core.Web.MultipartFormDataContentType.PrepareRequest(System.Net.HttpWebRequest,BizArk.Core.Web.WebHelper)">
            <summary>
            Creates an HttpWebRequest for the URL and prepares whatever it needs to.
            </summary>
            <param name="request"></param>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.MultipartFormDataContentType.SendRequest(BizArk.Core.Web.WebHelper,System.Net.HttpWebRequest)">
            <summary>
            Sends the request to the server. Does not get the response. Content types are only for sending, not receiving.
            </summary>
            <param name="helper"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.MultipartFormDataContentType.ContentLength">
            <summary>
            Gets the total content length for the data to be sent to the server.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MultipartFormDataContentType.PartBoundary">
            <summary>
            Gets or sets the part boundary. Used when ContentType = multipart_form_data.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.MultipartFormDataContentType.PartFooter">
            <summary>
            Gets the footer used between parts.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineArgAttribute">
            <summary>
            Apply this attribute to a property in order to allow the CmdLineProcessor to set the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineArgAttribute.#ctor">
            <summary>
            Creates an instance of CmdLineArgAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Alias">
            <summary>
            Gets or sets the alias for the command-line argument. It is recommended that this be a single character. This will overwrite Aliases.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Aliases">
            <summary>
            Gets or sets the aliases for the command-line argument. Aliases cannot conflict with one another. It is recommended that the first alias be a single character. This will overwrite Alias.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Required">
            <summary>
            Gets or sets a value that determines if the command-line argument must be specified.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.Usage">
            <summary>
            Gets or sets the short description that should be used in the usage description.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.AllowSave">
            <summary>
            Gets or sets a value that determines if the property should be saved.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineArgAttribute.ShowInUsage">
            <summary>
            Gets or sets a value that determines if the argument should be displayed in the usage. By default, only required arguments and help are displayed in the usage in order to save space when printing the usage.
            </summary>
        </member>
        <member name="T:BizArk.Core.TypeExt.TypeExt">
            <summary>
            Provides extension methods for Type.
            </summary>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.Implements(System.Type,System.Type)">
            <summary>
            Determines if the type implements the given interface.
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            Determines if the type is derived from the given base type.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsDerivedFromGenericType(System.Type,System.Type)">
            <summary>
            Determines if the type is an instance of a generic type.
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.Instantiate(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsNullable(System.Type)">
            <summary>
            Gets a value that determines if the type allows instances with a null value.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.GetCSharpName(System.Type)">
            <summary>
            Gets the C# name of the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.IsNumericType(System.Type)">
            <summary>
            Determines if the type corresponds to one of the built in numeric types (such as int, double, etc).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.TypeExt.TypeExt.GetTrueType(System.Type)">
            <summary>
            Gets the underlying type if the type is Nullable, otherwise just returns the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.ObjectExt.ObjectExt">
            <summary>
            Extends the Object class.
            </summary>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Convert``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. Uses <see cref="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="obj">The value to convert from.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetValue``1(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetInt(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Getint(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetString(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetBoolean(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetDecimal(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. This works for any object that uses CustomTypeDescriptor.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.GetPropertyName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property based on a Linq expression.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="type"></param>
            <param name="propertyRefExpr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ObjectExt.ObjectExt.Validate(System.Object)">
            <summary>
            Uses DataAnnotations to validate the properties of the object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:BizArk.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.Mime_Types">
             <summary>
               Looks up a localized string similar to # This file maps Internet media types to unique file extension(s).
            # Although created for httpd, this file is used by many software systems
            # and has been placed in the public domain for unlimited redisribution.
            #
            # The table below contains both registered and (common) unregistered types.
            # A type that has no unique extension can be ignored -- they are listed
            # here to guide configurations toward known types and to make it easier to
            # identify &quot;new&quot; types.  File extensions are also commonly used to i [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:BizArk.Core.Web.UploadFile">
            <summary>
            Represents a file that will be uploaded using the WebHelper class.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.UploadFile.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of UploadFile.
            </summary>
            <param name="contentType"></param>
            <param name="path"></param>
        </member>
        <member name="M:BizArk.Core.Web.UploadFile.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            Creates an instance of UploadFile.
            </summary>
            <param name="contentType"></param>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="M:BizArk.Core.Web.UploadFile.GetStream">
            <summary>
            Gets the stream that represents the file to upload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Web.UploadFile.op_Explicit(System.IO.FileInfo)~BizArk.Core.Web.UploadFile">
            <summary>
            Convert FileInfo to UploadFile.
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Web.UploadFile.ContentType">
            <summary>
            Gets or sets the mime type for the file (eg, text/plain, image/jpeg, etc).
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UploadFile.FileName">
            <summary>
            Gets or sets the name of the file. Option if FilePath is set (the name will come from the file path).
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UploadFile.FilePath">
            <summary>
            Gets or sets the path to the file. Optional, if Data is set, this is ignored.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.UploadFile.Data">
            <summary>
            Gets or sets the data to upload. Optional, if this is set, FilePath will be ignored.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.FileUtil">
            <summary>
            Provides methods that are useful when working with files and directories.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.RemoveDirectory(System.String)">
            <summary>
            Removes a directory as best as it can. Errors are ignored.
            </summary>
            <param name="dirPath"></param>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.GetIDDir(System.Int32)">
            <summary>
            Gets a directory structure based on a number. For example, if the number passed in is 12345, 00/00/00/01/23 is passed back.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.GetUniqueFileName(System.String,System.String)">
            <summary>
            Creates a unique file name in the given directory. 
            </summary>
            <param name="dir">The path to the directory.</param>
            <param name="template">The template for the file name. Place a {0} where the counter should go (ex, MyPicture{0}.jpg).</param>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.GetLegalFileName(System.String)">
            <summary>
            Strips illegal characters from a potential file name.
            </summary>
            <param name="name"></param>
            <returns>Legal file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.GetUniqueFileName(System.String)">
            <summary>
            Creates a unique file name in the temp directory.
            </summary>
            <param name="ext">The extension for the file.</param>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.GetUniqueFileName">
            <summary>
            Creates a unique file name in the temp directory. The file will have an extension of .tmp.
            </summary>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileUtil.DeleteFile(System.String)">
            <summary>
            Deletes a file. If unable to delete will return false.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:BizArk.Core.Util.Cache">
            <summary>
            Provides efficient storage for cached items.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Cache.#ctor">
            <summary>
            Creates a new instance of Cache.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Cache.SetValue(System.String,System.Object)">
            <summary>
            Puts a value into the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Util.Cache.SetValue(System.String,System.Object,System.TimeSpan)">
            <summary>
            Puts a value into the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:BizArk.Core.Util.Cache.ClearValue(System.String)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BizArk.Core.Util.Cache.GetValue(System.String)">
            <summary>
            Gets a value from the cache.
            </summary>
            <param name="key"></param>
            <returns>The value corresponding to the key. Null if the key is not defined.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Cache.GetValue``1(System.String,``0)">
            <summary>
            Gets a value from the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultVal"></param>
            <returns>The value corresponding to the key. defaultVal if the key is not defined.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Cache.PurgeCache">
            <summary>
            Removes expired items from the cache.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Cache.ClearCache">
            <summary>
            Completely clears the cache.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.Cache.Item(System.String)">
            <summary>
            Gets or sets a value in the cache. Can be set even if the item hasn't been set before. 
            </summary>
            <param name="key"></param>
            <returns>The object that was cached or null if it hasn't been cached yet.</returns>
        </member>
        <member name="P:BizArk.Core.Util.Cache.DefaultExpiration">
            <summary>
            Gets or sets the default expiration date.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.Cache.CacheItem.Value">
            <summary>
            Must call HasExpired before getting the value.
            </summary>
        </member>
        <member name="T:BizArk.Core.AttributeExt.AttributeExt">
            <summary>
            Provides extension methods for PropertyDescriptor.
            </summary>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the specified attribute from the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the specified attribute for the assembly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetAttribute``1(System.Enum)">
            <summary>
            Gets the specified attribute from the Enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.AttributeExt.AttributeExt.GetDescription(System.Enum)">
            <summary>
            Gets the value from the DescriptionAttribute for the given enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineOptions">
            <summary>
            Command-line options.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineOptions.#ctor">
            <summary>
            Creates an instance of CmdLineOptions.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Title">
            <summary>
            Gets or sets the title for the application. Shown at the top of the help text. Defaults to {AssemblyTitleAttribute} ver. {EntryAssembly.Version}
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.ApplicationName">
            <summary>
            Gets or sets the name of the application for use in the usage text. Defaults to the name of the exe that is running.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Usage">
            <summary>
            Gets or sets the text that shows how to use the command-line. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Description">
            <summary>
            Gets or sets the long description for the console application. Shown in help.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.DefaultArgNames">
            <summary>
            Gets or sets the names/aliases of the default properties for the command-line.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.ArgumentPrefix">
            <summary>
            Gets or sets the string used to identify argument names.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.WaitArgName">
            <summary>
            Gets or sets the boolean property used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram().
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Wait">
            <summary>
            Gets or sets a value used to determine if the application should wait before exiting. Only used in ConsoleApplication.RunProgram(). If WaitProperty is set, this value will be set during initialization.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineOptions.Comparer">
            <summary>
            Gets or sets the rule for comparing the names/aliases. By default this is set to 
            </summary>
        </member>
        <member name="T:BizArk.Core.Application">
            <summary>
            Primary class for application information and plugin support.
            </summary>
        </member>
        <member name="M:BizArk.Core.Application.#ctor">
            <summary>
            Private to enforce the Singleton pattern.
            </summary>
        </member>
        <member name="M:BizArk.Core.Application.GetPath(System.String)">
            <summary>
            Returns an absolute path relative to the ExePath.
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Application.GetTempPath">
            <summary>
            Gets the path to the temporary directory for this application. This is a subdirectory off of the system temp directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Application.CleanTempDirectory">
            <summary>
            Removes the temp directory for this application.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Title">
            <summary>
            Gets the title of the executing assembly from AssemblyTitleAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Version">
            <summary>
            Gets the version of the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Description">
            <summary>
            Gets the description of the executing assembly from AssemblyDescriptionAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Company">
            <summary>
            Gets the company name of the executing assembly from AssemblyCompanyAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Product">
            <summary>
            Gets the product name of the executing assembly from AssemblyProductAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Copyright">
            <summary>
            Gets the copyright of the executing assembly from AssemblyCopyrightAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Trademark">
            <summary>
            Gets the trademark of the executing assembly from AssemblyTrademarkAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExePath">
            <summary>
            Gets the path the the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExeName">
            <summary>
            Gets the just the name of the exe (without the extension).
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Cache">
            <summary>
            Gets the application level cache.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ClickOnceDeployed">
            <summary>
            Gets a value that determines if the application was deployed via ClickOnce.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ClickOnceUrl">
            <summary>
            Gets the URL used for click-once deployed apps.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperOptions">
            <summary>
            Options for WebHelper.
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperOptions.#ctor">
            <summary>
            Creates an instance of WebHelperOptions.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.Method">
            <summary>
            Gets or sets the method for the web request. The default is GET but might be different based on the content type.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.Timeout">
            <summary>
            Gets or sets the timeout for the web request. If null, uses the default value for HttpWebRequest (100 seconds). For no timeout, set to TimeSpan.MaxValue.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.Values">
            <summary>
            Gets or sets the parameters for the request. This can be an object with the properties as parameters (recommend anonymous object) or it can be a WebParameterDictionary. To upload files, use a UploadFile or FileInfo object.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.Headers">
            <summary>
            Gets the headers for the request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.KeepAlive">
            <summary>
            Gets or sets a value that determines if http keep-alives are used. The default is true.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.AllowAutoRedirect">
            <summary>
            Gets or sets a value that determines if redirects are followed. Default is false.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.State">
            <summary>
            Gets or sets the state object that will be sent through the events. The state object is not used internally.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.UseCompression">
            <summary>
            Gets or sets a value that determines if compression should be used. The default is true.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.ResponseEncoding">
            <summary>
            Gets or sets the default encoding for the response. This is only used if the response does not define an encoding and you are trying to convert the response to a string.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.BufferSize">
            <summary>
            Gets or sets the size of the buffer used to write to the request stream and read from the response stream. This provides control of how often progress is reported.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.PrepareRequest">
            <summary>
            Gets or sets a method that will be called after WebHelper has prepared the HttpWebRequest, but before the request is made. This will be called on the thread that made the initial request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.ReportProgress">
            <summary>
            Gets or sets a method that will be called when reporting progress. This will be called on the thread that made the initial request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperOptions.RequestComplete">
            <summary>
            Gets or sets a method that will be called when the request completes. Called if the request is successful, failed, or canceled. This will be called on the thread that made the initial request.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperOptions.PrepareRequestDelegate">
            <summary>
            Method definition for PrepareRequest.
            </summary>
            <param name="helper"></param>
            <param name="request"></param>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperOptions.ReportProgressDelegate">
            <summary>
            Method definition for ReportProgress.
            </summary>
            <param name="helper"></param>
            <param name="bytesSent"></param>
            <param name="bytesToSend"></param>
            <param name="bytesReceieved"></param>
            <param name="bytesToReceive"></param>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperOptions.RequestCompleteDelegate">
            <summary>
            Method definition for RequestComplete.
            </summary>
            <param name="helper"></param>
            <param name="response"></param>
            <param name="ex"></param>
            <param name="cancelled"></param>
        </member>
        <member name="T:BizArk.Core.Web.RequestCompletedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.RequestCompletedEventArgs.#ctor(BizArk.Core.Web.WebHelperResponse,System.Object,System.Boolean)">
            <summary>
            Creates an instance of RequestCompletedEventArgs.
            </summary>
            <param name="response"></param>
            <param name="state"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:BizArk.Core.Web.RequestCompletedEventArgs.#ctor(System.Exception,System.Object,System.Boolean)">
            <summary>
            Creates an instance of RequestCompletedEventArgs.
            </summary>
            <param name="ex"></param>
            <param name="state"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:BizArk.Core.Web.RequestCompletedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates an instance of RequestCompletedEventArgs.
            </summary>
            <param name="state"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:BizArk.Core.Web.RequestCompletedEventArgs.#ctor(BizArk.Core.Web.WebHelperResponse,System.Exception,System.Object,System.Boolean)">
            <summary>
            Creates an instance of RequestCompletedEventArgs.
            </summary>
            <param name="response"></param>
            <param name="ex"></param>
            <param name="state"></param>
            <param name="cancelled"></param>
        </member>
        <member name="P:BizArk.Core.Web.RequestCompletedEventArgs.Response">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.RequestCompletedEventArgs.Error">
            <summary>
            Gets the error, if any, associated with the request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.RequestCompletedEventArgs.State">
            <summary>
            Gets the state associated with the request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.RequestCompletedEventArgs.Cancelled">
            <summary>
            Gets a value that determines if the request was cancelled before it was completed.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.WebHelperProgressChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.WebHelperProgressChangedEventArgs.#ctor(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Object)">
            <summary>
            Creates an instance of WebHelperProgressChangedEventArgs.
            </summary>
            <param name="bytesToSend"></param>
            <param name="bytesSent"></param>
            <param name="bytesToReceive"></param>
            <param name="bytesReceived"></param>
            <param name="state"></param>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.BytesToSend">
            <summary>
            Gets the number of bytes to send.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.SendProgressPercent">
            <summary>
            Gets the progress for the request.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.BytesToReceive">
            <summary>
            Gets the number of bytes in the response. If the response hasn't been sent yet, this is an estimate based on WebHelper.EstimatedResponseLength.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.ResponseProgressPercent">
            <summary>
            Gets the progress for the response.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.WebHelperProgressChangedEventArgs.State">
            <summary>
            Gets the state associated with the request.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.PrepareRequestEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.PrepareRequestEventArgs.#ctor(System.Net.HttpWebRequest,System.Object)">
            <summary>
            Creates an instance of PrepareRequestEventArgs.
            </summary>
            <param name="request"></param>
            <param name="state"></param>
        </member>
        <member name="P:BizArk.Core.Web.PrepareRequestEventArgs.Request">
            <summary>
            Gets the HttpWebRequest that can be modified prior to sending it to the server.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.PrepareRequestEventArgs.State">
            <summary>
            Gets the state associated with the request.
            </summary>
        </member>
        <member name="T:BizArk.Core.Web.ProcessResponseStreamEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Web.ProcessResponseStreamEventArgs.#ctor(System.IO.Stream,System.Net.HttpWebResponse,System.Object)">
            <summary>
            Creates an instance of ProcessResponseStreamEventArgs.
            </summary>
            <param name="s"></param>
            <param name="response"></param>
            <param name="state"></param>
        </member>
        <member name="P:BizArk.Core.Web.ProcessResponseStreamEventArgs.ResponseStream">
            <summary>
            Gets the stream associated with the response.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.ProcessResponseStreamEventArgs.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.ProcessResponseStreamEventArgs.Handled">
            <summary>
            Gets or sets a value that determines if the stream has been processed. Prevents the helper from processing the stream.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.ProcessResponseStreamEventArgs.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="P:BizArk.Core.Web.ProcessResponseStreamEventArgs.State">
            <summary>
            Gets the state associated with the request.
            </summary>
        </member>
        <member name="T:BizArk.Core.ArrayExt.ArrayExt">
            <summary>
            Provides extension methods for string arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Array,System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.String[],System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.String[],System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Int32[],System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Shrink(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new array with just the specified elements.
            </summary>
            <param name="arr"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Convert``1(System.Array)">
            <summary>
            Converts the array to a different type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Convert(System.Array,System.Type)">
            <summary>
            Converts the array to a different type.
            </summary>
            <param name="arr"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.RemoveEmpties(System.String[])">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.RemoveEmpties(System.Array)">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split``1(System.String,System.Char)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Split``1(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Join(System.Array,System.String)">
            <summary>
            Joins the elements of an array together as a string using the given separator.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Append``1(``0[],``0[])">
            <summary>
            Concatenates the two arrays together and returns a new array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Append``1(``0[],``0)">
            <summary>
            Adds the value to the end of the array and returns the new array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence
            within the entire one-dimensional System.Array.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            The index of the first occurrence of value within the entire array, if found;
            otherwise, the lower bound of the array minus 1.
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Contains(System.Array,System.Object)">
            <summary>
            Determines if the array contains the given value.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.ArrayExt.ArrayExt.Copy(System.Array)">
            <summary>
            Copies the array to a new array of the same type.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Email.SendStatus">
            <summary>
            The status from a MAPI send request.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.SendStatus.Ok">
            <summary>The email was sent.</summary>
        </member>
        <member name="F:BizArk.Core.Email.SendStatus.Cancel">
            <summary>The email was cancelled by the user.</summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Reserved">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Subject">
            <summary>
            Pointer to the text string describing the message subject, typically limited to 256 characters or less. If this member is empty or NULL, the user has not entered subject text.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.NoteText">
            <summary>
            Pointer to a string containing the message text. If this member is empty or NULL, there is no message text.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.MessageType">
            <summary>
            Pointer to a string indicating a non-IPM type of message. Client applications can select message types for their non-IPM messages. Clients that only support IPM messages can ignore the lpszMessageType member when reading messages and set it to empty or NULL when sending messages.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.DateReceived">
            <summary>
            Pointer to a string indicating the date when the message was received. The format is YYYY/MM/DD HH:MM, using a 24-hour clock.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.ConversationID">
            <summary>
            Pointer to a string identifying the conversation thread to which the message beints. Some messaging systems can ignore and not return this member.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Flags">
            <summary>
            Bitmask of message status flags
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Originator">
            <summary>
            Pointer to a MapiRecipDesc structure containing information about the sender of the message.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.RecipientCount">
            <summary>
            The number of message recipient structures in the array pointed to by the lpRecips member. A value of zero indicates no recipients are included.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Recipients">
            <summary>
            Pointer to an array of MapiRecipDesc structures, each containing information about a message recipient.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.FileCount">
            <summary>
            The number of structures describing file attachments in the array pointed to by the lpFiles member. A value of zero indicates no file attachments are included.
            </summary>
        </member>
        <member name="F:BizArk.Core.Email.MapiMessage.Files">
            <summary>
            Pointer to an array of MapiFileDesc structures, each containing information about a file attachment.
            </summary>
        </member>
        <member name="T:BizArk.Core.Email.Mapi32Exception">
            <summary>
            Exceptions thrown from MAPI32.dll.
            </summary>
        </member>
        <member name="M:BizArk.Core.Email.Mapi32Exception.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of Mapi32Exception.
            </summary>
            <param name="message"></param>
            <param name="errCode"></param>
        </member>
        <member name="P:BizArk.Core.Email.Mapi32Exception.ErrorCode">
            <summary>
            Gets the error code as returned by MAPISendMail.
            </summary>
        </member>
        <member name="T:BizArk.Core.Data.Database">
            <summary>
            Represents a database and provides some simple methods that can be used to query it.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.Database.#ctor(BizArk.Core.Data.IDbInfo)">
            <summary>
            Creates an instance of Database.
            </summary>
            <param name="dbInfo"></param>
        </member>
        <member name="M:BizArk.Core.Data.Database.Dispose">
            <summary>
            Closes the database connection.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.Database.Dispose(System.Boolean)">
            <summary>
            Disposes the Database.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:BizArk.Core.Data.Database.CreateCommand(System.String,System.Object)">
            <summary>
            Creates a database command.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            Executes the command and returns the first column of the first row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Parameterized sql string.</param>
            <param name="parameters">Object that contains parameters. Property names must match parameters in sql.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteScalar``1(System.Data.Common.DbCommand)">
            <summary>
            Executes the command and returns the first column of the first row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteScalar``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes the command and returns the first column of the first row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="dflt">The value to return if the database value is DBNull.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            Executes the command against the database.
            </summary>
            <param name="sql">Parameterized sql string.</param>
            <param name="parameters">Object that contains parameters. Property names must match parameters in sql.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the command against the database.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteDataReader(System.String,System.Object,System.Action{System.Data.IDataReader})">
            <summary>
            Processes a SqlDataReader calling the processRow delegate for each row.
            </summary>
            <param name="sql">Parameterized sql string.</param>
            <param name="parameters">Object that contains parameters. Property names must match parameters in sql.</param>
            <param name="processRow">void ProcessDataRow(SqlDataReader dr)</param>
        </member>
        <member name="M:BizArk.Core.Data.Database.ExecuteDataReader(System.Data.Common.DbCommand,System.Action{System.Data.IDataReader})">
            <summary>
            Processes a SqlDataReader calling the processRow delegate for each row.
            </summary>
            <param name="cmd"></param>
            <param name="processRow">void ProcessDataRow(SqlDataReader dr)</param>
        </member>
        <member name="M:BizArk.Core.Data.Database.SelectSingle``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataReader,``0})">
            <summary>
            Executes a command and returns the first row as an object. The class must have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="process">A function to convert the row to the object.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.Database.Select``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataReader,``0})">
            <summary>
            Executes a command and returns the rows as an array of objects. The class must have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="process">A function to convert the row to the object.</param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Data.Database.DbInfo">
            <summary>
            Gets the DbInfo object associated with this Database.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.Database.Disposed">
            <summary>
            Gets a value that determines if this Database has been disposed.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.Database.Connection">
            <summary>
            Gets an open connection for the database. Call Database.Dispose to close and release the connection.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.CmdLineObject">
            <summary>
            Represents an object that can be initialized via command-line arguments.
            </summary>
            <remarks>
            <para>The CmdLineObject class can be inherited from to allow the 
            properties of a class to be initialized from command-line arguments.
            The properties can be any type that can be converted to and from a string 
            using the <see cref="M:BizArk.Core.ConvertEx.ChangeType(System.Object,System.Type,System.IFormatProvider)"/> 
            method.</para>
            <para>Only properties that have the CmdLineArgAttribute applied to them
            can be initialized from the command-line. To make a property the default
            property, apply the CmdLineDefaultArgAttribute to the class and specify
            the name of the property.</para>
            <para>This class will automatically produce command-line help to let
            the user know what arguments are available from the command-line and
            how to use them. If you want to customize the usage text, override the
            GetUsage method. If you want to customize the title of the application,
            override the GetTitle method. The usage for properties can be set in the
            CmdLineArgAttribute and the description can be set by applying the
            System.ComponentModel.DescriptionAttribute to the property.</para>
            </remarks>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.#ctor">
            <summary>
            Instantiates CmdLineObject.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.#ctor(BizArk.Core.CmdLine.CmdLineOptions)">
            <summary>
            Instantiates CmdLineObject.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialize_Internal">
            <summary>
            Initializes the command-line object. 
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialize">
            <summary>
            Initializes the CmdLineObject.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.InitializeEmpty">
            <summary>
            Initializes the command-line object, but does not populate it.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.InitializeFromQueryString(System.String)">
            <summary>
            Initializes the command-line args based on a query string. Used for 
            </summary>
            <param name="queryStr"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.InitializeFromCmdLine(System.String[])">
            <summary>
            Initializes the object with the given arguments.
            </summary>
            <param name="args">The command-line args. Make sure to shrink the array if the first element contains the path to the application (as in Environment.GetCommandLineArgs()) or the default parameter won't get set correctly.</param>
            <example>
            using BizArk.Core.ArrayExt;
            var args = Environment.GetCommandLineArgs().Shrink(1);
            </example>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Validate">
            <summary>
            Override this method to perform cmd-line validation. It is recommended to call the base method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.IsValid">
            <summary>
            Makes sure the command-line object is valid. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.GetHelpText(System.Int32)">
            <summary>
            Gets the full description for the command-line arguments.
            </summary>
            <param name="maxWidth">Determines the number of characters per line. Set this to Console.Width.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.SaveToXml(System.String)">
            <summary>
            Saves the settings to an xml file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.RestoreFromXml(System.String)">
            <summary>
            Restores the settings from an xml file.
            </summary>
            <param name="path"></param>
            <returns>True if the settings are restored from the file.</returns>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.Initialized">
            <summary>
            This method is called after initialization is complete to allow for any additional intialization.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.CmdLineObject.ToString">
            <summary>
            Gets the usage for this command-line object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Options">
            <summary>
            Gets the options used for the handling the command-line object.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Help">
            <summary>
            Gets or sets a value that determines if help should be displayed.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.Properties">
            <summary>
            Gets the list of command-line properties.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.ErrorText">
            <summary>
            Gets the error text for the command-line object.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.IsInitialized">
            <summary>
            Gets a value that determines if the CmdLineObject is ready to use.
            </summary>
        </member>
        <member name="P:BizArk.Core.CmdLine.CmdLineObject.DefaultProperties">
            <summary>
            Gets the default properties for the command-line.
            </summary>
        </member>
        <member name="T:BizArk.Core.CmdLine.ConsoleApplication">
            <summary>
            Provides helper methods for command-line applications.
            </summary>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.RunProgram``1(BizArk.Core.CmdLine.ConsoleApplication.Run{``0})">
            <summary>
            Convenient method for running an application. Provides command-line argument initialization, help text, error handling, and waiting for exit. This is typically the only line of code in Main.
            </summary>
            <typeparam name="TArgs">The type for the CmdLineObject to use. Must have a default constructor.</typeparam>
            <param name="run">The method to run once the arguments are initialized. Will not be called if the help flag is set or the args aren't valid.</param>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.WriteError(System.Exception)">
            <summary>
            Displays the exception to the console.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:BizArk.Core.CmdLine.ConsoleApplication.WriteLine(System.String,System.String)">
            <summary>
            Writes a message to the console. Ensures that the message is wrapped at word boundaries and that indentation is preserved.
            </summary>
            <param name="msg"></param>
            <param name="prefix">Adds this string to the beginning of each line.</param>
        </member>
        <member name="T:BizArk.Core.CmdLine.ConsoleApplication.Run`1">
            <summary>
            Delegate method that is used to run a console application.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
        </member>
    </members>
</doc>
