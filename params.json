{"tagline":"Tool to automate generation of New Relic custom instrumentation XML files for .NET projects","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-25212406-1","name":"nrconfig","body":"##Overview\r\nnrconfig is a command-line tool intended to support creating and maintaining [custom instrumentation](https://newrelic.com/docs/dotnet/CustomInstrumentation.html) files for use by New Relic.\r\n\r\n**Note** I'm not affiliated with New Relic, Inc beyond being a happy customer of theirs and this tool is in no way endorsed by them. If there're issues with the tool or questions about the source, come to me and not their (lovely) support team as they'll not know what you're talking about.\r\n\r\n##Usage\r\n\r\n###Mark up your methods for fine-grained control\r\nIf you want to instrument specific methods or all of the methods within specific classes then the best approach is to mark them up with Instrument attributes.\r\n\r\n* Install the nrconfig NuGet package into the projects you wish to instrument\r\n* Annotate at the assembly, class or method level with the [Instrument] attribute\r\n* Run nrconfig against the assemblies in question\r\n\r\n```\r\nnrconfig /i *.dll\r\n```\r\n\r\n###Generate instrumentation files for unadorned assemblies, including the BCL\r\nIf you can't or don't want to change your code, or want to quickly get a baseline instrumentation configuration file that you can then tweak manually then you can use the /f flag.\r\n\r\n```\r\nnrconfig /i *.dll /f [filters]\r\n```\r\n\r\nwhere [filters] is one or more of:\r\n\r\n* all\r\n* methods\r\n* properties\r\n* constructors\r\n\r\nseparated by spaces, and where each of those can be followed immediately by a + or - to limit processing to public or non-public targets only. So, to instrument all public methods and properties in any class in an assembly:\r\n\r\n````\r\nnrconfig /i MyAssembly.dll /f methods+ properties+\r\n````\r\n\r\nwhile to instrument all methods, whether public or private:\r\n\r\n````\r\nnrconfig /i MyAssembly.dll /f methods+-\r\n````\r\n\r\n###Merge multiple configuration files\r\nThe filter format is pretty basic, and you might want to use different filters for different assemblies. You can do that by running nrconfig multiple times with different output files specified, then merge them with the /m flag:\r\n\r\n````\r\nREM Instrument all methods in FirstAssembly, \r\nREM and public ones in SecondAssembly\r\nnrconfig /i FirstAssembly.dll /f methods+- /o FirstAssembly.NewRelic.xml\r\nnrconfig /i SecondAssembly.dll /f methods+ /o SecondAssembly.NewRelic.xml\r\n\r\nREM Merge the two files\r\nnrconfig /m /i *.NewRelic.xml /o MergedInstrumentation.xml\r\n````\r\n\r\n###Options\r\n\r\n#### /i &lt;file_1&gt; [file_2] ... [file_n]\r\nSpecifies the input files to be processed. These can either be specific paths, include wildcard strings in the filename portion or include environment variables.\r\n\r\nIf used in conjunction with the /m switch the files specified by /i must be XML documents previously generated by nrconfig.\r\n\r\n#### /o &lt;outputpath&gt;\r\nSpecifies the output filename. If /o isn't specified, a file called CustomInstrumentation.xml will be generated in the current directory.\r\n\r\n#### /f &lt;filter1&gt; [filter2]\r\nSpecifies that all methods, constructors and properties matched by the filters should be instrumented even if they haven't been annotated by [Instrument] attributes. Each filter must be from the set:\r\n\r\n* all\r\n* properties\r\n* methods\r\n* constructors\r\n\r\nand each can be immediately followed by + or - (or both) signifying public or non-public respectively. If neither + nor - is specified, + is assumed.\r\n\r\n#### /m\r\nMerges input instrumentation files into a single output file.\r\n\r\n#### /v\r\nVerbose mode, shows a little more diagnostic information during the run.\r\n\r\n#### /debug \r\nExtra-verbose mode, generates a lot of console output but useful if you're about to report a bug.\r\n\r\n##Licence\r\nnrconfig is licensed under the [BSD 2-Clause Licence](http://opensource.org/licenses/BSD-2-Clause):\r\n\r\nCopyright (c) 2013, Paul O'Neill, pablissimo.com\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."}